package com.tang.structuralmode.appearancemode;

/**
 * @author weepppp 2022/7/13 22:32
 **/

/**
 * @功能: 外观模式
 * @概念： 为子系统的一组接口提供一个一致的界面
 * @优点： 像遥控器一样，老人不需要花哨的功能，按遥控器操纵就好
 * 当你要为一个复杂的子系统提供一个简单的接口时。子系统往往因为不断演化而变得越来越复杂。大多数模式使用时都会产生更小更多的类。这使得子系统更具可重用性，也更容易对子系统进行定制，但这也给一些不需要定制子系统的的用户带来使用上的困难。Facade可以提供一个简单的缺省视图，这一视图对大多数用户来说已经足够，而那些需要更多的可定制性的用户可以越过facade层。
 * 客户程序与抽象类的实现部分之间存在着很大的依赖性。引入facade将这个子系统与客户以及其它的子系统分离，可以提高子系统的独立性和可移植性。
 * 当你需要构建一个层次结构的子系统时，使用facade模式定义子系统中每层的入口点。如果子系统之间是相互依赖的，你可以让它们仅通过facade进行通讯，从而简化了它们之间的依赖。
 */
public class Main {

    public static void main(String[] args) {
        Facade facade = new Facade();
        facade.methodA();
        facade.methodC();
    }
}
